<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>sol</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/.*\b(pragma|contract|import)$\n?</string>
	<key>keyEquivalent</key>
	<string>^~S</string>
	<key>name</key>
	<string>Solidity</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#core</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#round-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#square-brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#curly-brackets</string>
				</dict>
			</array>
		</dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#special-comments-conditional-compilation</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.sol</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(//).*$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.sol</string>
				</dict>
			</array>
		</dict>
		<key>core</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-function-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-labels</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-for</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-punctuation</string>
				</dict>
			</array>
		</dict>
		<key>curly-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\{</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.curly</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#support</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-regexp</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-number</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-quasi</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-constant</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-language-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-contract</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal-variable</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration-parameters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.sol</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>[_$a-zA-Z][$\w]*</string>
							<key>name</key>
							<string>variable.parameter.function.sol</string>
						</dict>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameter.function.sol</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comments</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-contract</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?x) (?&lt;!\.)\b(contract) \s+((?!\b(is)\b)[_$a-zA-Z][$\w]*)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.class.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.curly.sol</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>literal-for</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.)\b(for)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.loop.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.for.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\(</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>meta.brace.round.sol</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#literal-keyword-storage</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#literal-punctuation</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>
              (?x) \s*(function)(?:\s*(\*)|(?=\s|[(]))
              \s*([_$a-zA-Z][$\w]*)?\s*
          </string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.sol</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>
              (?x) (\b[_$a-zA-Z][$\w]*) \s*=
              \s*(function)(?:\s*(\*)|(?=\s|[(]))
              \s*([_$a-zA-Z][$\w]*)?\s*
          </string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.type.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.sol</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.sol</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>
              (?x) (\b_?[A-Z][$\w]*)?
              (\.)([_$a-zA-Z][$\w]*) \s*=
              \s*(function)(?:\s*(\*)|(?=\s|[(]))
              \s*([_$a-zA-Z][$\w]*)?\s*
          </string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.sol</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>storage.type.sol</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.sol</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.sol</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.prototype.function.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>
              (?x) (\b_?[A-Z][$\w]*)? (\.)([_$a-zA-Z][$\w]*) \s*=
              \s*(function)(?:\s*(\*)|(?=\s|[(]))
              \s*([_$a-zA-Z][$\w]*)?\s*
          </string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.sol</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.sol</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.sol</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>name</key>
					<string>meta.function.static.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.group.braces.round.function.arguments.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) ([_$a-zA-Z][$\w]*)\s* (\(\s*\))</string>
					<key>name</key>
					<string>meta.function-call.without-arguments.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) ([_$a-zA-Z][$\w]*)\s* (?=\()</string>
					<key>name</key>
					<string>meta.function-call.with-arguments.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-function-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>
              (?x) \b([_$a-zA-Z][$\w]*) \s*(:)
              \s*(function)(?:\s*(\*)|(?=\s|[(]))
              \s*([_$a-zA-Z][$\w]*)?\s*
          </string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.sol</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.sol</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.sol</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>
              (?x) (?:
              ((')((?:[^']|\\')*)('))|
              ((")((?:[^"]|\\")*)(")) ) \s*(:)
              \s*(function)(?:\s*(\*)|(?=\s|[(]))
              \s*([_$a-zA-Z][$\w]*)?\s*
          </string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.quoted.single.sol</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>storage.type.sol</string>
						</dict>
						<key>11</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.sol</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.sol</string>
						</dict>
						<key>13</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sol</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>string.quoted.double.sol</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sol</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.sol</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sol</string>
						</dict>
						<key>9</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#function-declaration-parameters</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-keyword-storage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(constant)\b</string>
					<key>name</key>
					<string>storage.type.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-keywords</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal-keyword-storage</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(return)\b</string>
					<key>name</key>
					<string>keyword.control.flow.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(if|else)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(require|assert)\b</string>
					<key>name</key>
					<string>keyword.require-assert.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-labels</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>
              (?x) (?&lt;!\?)(?&lt;!\?\s)(?=(
              ((')((?:[^']|\\')*)('))|
              ((")((?:[^"]|\\")*)(")) )\s*:)
          </string>
					<key>end</key>
					<string>:</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.sol</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#literal-string</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.label.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.key-value.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\?|\?\s)([_$a-zA-Z][$\w]*)\s*(:)</string>
					<key>name</key>
					<string>constant.other.object.key.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-constant</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\btrue\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\bfalse\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-language-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(arguments)\b</string>
					<key>name</key>
					<string>variable.language.arguments.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(super)\b</string>
					<key>name</key>
					<string>variable.language.super.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!(?&lt;!\.\.)\.)\b(this)\b</string>
					<key>name</key>
					<string>variable.language.this.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)(?:\B[-+]|\b)0x[0-9a-f]*\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.hex.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\B[-+]|\b)0[0-9]+\.(\B|\b[0-9]+)</string>
					<key>name</key>
					<string>invalid.illegal.numeric.octal.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>
              (?xi) (?:\B[-+])? (?: \b0b[0-1]*| # binary
              \b0o[0-7]*| # octal \b0x[0-9a-f]*| # hex (
              \B\.[0-9]+| # e.g. .999 \b[0-9]+(\.[0-9]*)? # e.g.
              999.999, 999. or 999 )(e[-+]?[0-9]+)? # e.g. e+123,
              E-123 )
          </string>
					<key>name</key>
					<string>constant.numeric.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(delete|new)\b</string>
					<key>name</key>
					<string>keyword.operator.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>
              (?x) !(?!=)| # logical-not right-to-left right
              &amp;&amp; | # logical-and left-to-right both \|\| |
              # logical-or left-to-right both
          </string>
					<key>name</key>
					<string>keyword.operator.logical.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?x) =(?!=)| # assignment right-to-left both</string>
					<key>name</key>
					<string>keyword.operator.assignment.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>
              (?x) %= | # assignment right-to-left both &amp;= | #
              assignment right-to-left both \*= | # assignment
              right-to-left both \+= | # assignment right-to-left
              both -= | # assignment right-to-left both /= | #
              assignment right-to-left both \^= | # assignment
              right-to-left both \|= | # assignment right-to-left
              both &lt;&lt;= | # assignment right-to-left both
              &gt;&gt;= | # assignment right-to-left both
              &gt;&gt;&gt;= | # assignment right-to-left both
          </string>
					<key>name</key>
					<string>keyword.operator.assignment.augmented.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>
              (?x) ~ | # bitwise-not right-to-left right &lt;&lt;
              | # bitwise-shift left-to-right both &gt;&gt;&gt; |
              # bitwise-shift left-to-right both &gt;&gt; | #
              bitwise-shift left-to-right both &amp; | #
              bitwise-and left-to-right both \^ | # bitwise-xor
              left-to-right both \| # bitwise-or left-to-right
              both
          </string>
					<key>name</key>
					<string>keyword.operator.bitwise.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>
              (?x) &lt;= | # relational left-to-right both &gt;= |
              # relational left-to-right both &lt; | # relational
              left-to-right both &gt; # relational left-to-right
              both
          </string>
					<key>name</key>
					<string>keyword.operator.relational.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>
              (?x) == | # equality left-to-right both != # equality left-to-right both
          </string>
					<key>name</key>
					<string>keyword.operator.comparison.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>
              (?x) / | # division left-to-right both
              % | # modulus left-to-right both
              \* | # multiplication left-to-right both
              \+ | # addition left-to-right both
              - # subtraction left-to-right both
          </string>
					<key>name</key>
					<string>keyword.operator.arithmetic.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?|:</string>
					<key>name</key>
					<string>keyword.operator.ternary.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\.\.\.</string>
					<key>name</key>
					<string>keyword.operator.spread.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>keyword.operator.accessor.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-prototype</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\b</string>
					<key>name</key>
					<string>meta.prototype.access.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.class.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.language.prototype.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$a-zA-Z][$\w]*)(\.)(prototype)\s*=\s*</string>
					<key>name</key>
					<string>meta.prototype.declaration.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-punctuation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\;</string>
					<key>name</key>
					<string>punctuation.terminator.statement.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.comma.sol</string>
				</dict>
			</array>
		</dict>
		<key>literal-quasi</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([a-zA-Z$_][\w$_]*)?(`)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.quasi.tag.name.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.quasi.begin.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.quasi.end.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quasi.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\${</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.quasi.element.begin.sol</string>
								</dict>
							</dict>
							<key>end</key>
							<string>}</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.quasi.element.end.sol</string>
								</dict>
							</dict>
							<key>name</key>
							<string>entity.quasi.element.sol</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#expression</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>
              (?x) (?&lt;=
              \.|\(|,|{|}|\[|;|,|&lt;|&gt;|&lt;=|&gt;=|==|!=|==|!=|\+|-|\*|%|\+\+|--|&lt;&lt;|&gt;&gt;|&gt;&gt;&gt;|&amp;|\||\^|!|~|&amp;&amp;|\|\||\?|:|=|\+=|-=|\*=|%=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|&amp;=|\|=|\^=|/|/=| \Wnew|\Wdelete|\Wvoid|\Wreturn| ^new|^delete|^void|^return|^ )\s* (/) (?!/|\*|$)
          </string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(/)([gimy]*)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.other.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.regexp.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>source.regexp.sol</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(')|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(")|(\n)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.newline.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string-content</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>literal-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[A-Z][_$\dA-Z]*\b</string>
					<key>name</key>
					<string>variable.other.constant.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.dollar.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\$)[$\w]+</string>
					<key>name</key>
					<string>variable.other.dollar.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.class.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.accessor.sol</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.static.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x) \b([A-Z][$\w]*)\s*(\.) ([_$a-zA-Z][$\w]*)</string>
					<key>name</key>
					<string>meta.property.class.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.other.object.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.)[_$a-zA-Z][$\w]*\s*(?=[\[\.])</string>
					<key>name</key>
					<string>variable.other.object.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.property.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;=\.)\s*[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>meta.property.object.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$a-zA-Z][$\w]*</string>
					<key>name</key>
					<string>variable.other.readwrite.sol</string>
				</dict>
			</array>
		</dict>
		<key>round-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.round</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>special-comments-conditional-compilation</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*(?=@)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.conditional.sol</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.conditional.sol</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>/\*</string>
							<key>name</key>
							<string>punctuation.definition.comment.sol</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.keyword.sol</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(@)(if|elif|else|end|ifdef|endif|cc_on|set)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.sol</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.variable.sol</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>square-brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.sol</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.square.sol</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.braces.square</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string-content</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\\s*\n</string>
					<key>name</key>
					<string>constant.character.escape.newline.sol</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\(x[\da-fA-F]{2}|u[\da-fA-F]{4}|.)</string>
					<key>name</key>
					<string>constant.character.escape.sol</string>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.(pop|push)\b</string>
					<key>name</key>
					<string>support.function.mutator.sol</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>{{</string>
					<key>end</key>
					<string>}}</string>
					<key>name</key>
					<string>meta.tag.mustache.sol</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.sol</string>
	<key>uuid</key>
	<string>3F50A19F-DEE2-4C44-8F60-C01CEE8CEA68</string>
</dict>
</plist>
